{"ast":null,"code":"const fragmentShader = `\nvarying vec2 vUv;\nvarying vec3 vPos;\n\n// varying vec3 vColor;\n\n// uniform vec3 u_a_color;\n// uniform vec3 u_b_color;\n// uniform vec3 u_c_color;\n\nuniform vec3 u_colorA;\nuniform vec3 u_colorB;\nvarying float vZ;\nuniform vec3 u_bg;\nuniform float u_time;\n\n\n//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\n// https://github.com/hughsk/glsl-noise/blob/master/simplex/2d.glsl\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n    + i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n// End of Simplex Noise Code\n\n\n\nvoid main() {\n  // // vec3 colorA = vec3(0.912,0.191,0.652);\n  // // vec3 colorB = vec3(1.000,0.777,0.052);\n\n\n  // // // \"Normalizing\" with an arbitrary value\n  // // // We'll see a cleaner technique later :)   \n  // // vec2 normalizedPixel = gl_FragCoord.xy/600.0;\n  // // vec3 color = mix(u_a_color, u_b_color, vec3(vUv.y));\n\n  // // gl_FragColor = vec4(vColor,1.0);\n  // // gl_FragColor = vec4(color, 1.);\n\n  // // gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n\n  // // vec3 color = mix(u_colorA, u_colorB, vZ * 2.0 + 0.5); \n  // // gl_FragColor = vec4(color, 1.0);\n\n  // vec3 color = mix(u_colorA, u_colorB, vZ * 2.0 + 0.5); \n  // gl_FragColor = vec4(color, 1.0);\n\n\n  vec3 color = u_bg;\n\n  float noise1 = snoise(vUv + u_time * (sin(vPos.x * 0.001) + 0.2));\n  float noise2 = snoise(vUv + u_time * (sin(vPos.y * 0.001) + 0.2));\n\n  color = mix(color, u_colorA, noise1);\n  color = mix(color, u_colorB, noise2);\n  \n  gl_FragColor = vec4(color ,1.0);\n}\n\n`;\nexport default fragmentShader;","map":{"version":3,"names":["fragmentShader"],"sources":["/Users/angelarucci/Desktop/Projects/Personal-Site/src/Shader/FragmentShader.js"],"sourcesContent":["const fragmentShader = `\nvarying vec2 vUv;\nvarying vec3 vPos;\n\n// varying vec3 vColor;\n\n// uniform vec3 u_a_color;\n// uniform vec3 u_b_color;\n// uniform vec3 u_c_color;\n\nuniform vec3 u_colorA;\nuniform vec3 u_colorB;\nvarying float vZ;\nuniform vec3 u_bg;\nuniform float u_time;\n\n\n//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\n// https://github.com/hughsk/glsl-noise/blob/master/simplex/2d.glsl\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n    + i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n// End of Simplex Noise Code\n\n\n\nvoid main() {\n  // // vec3 colorA = vec3(0.912,0.191,0.652);\n  // // vec3 colorB = vec3(1.000,0.777,0.052);\n\n\n  // // // \"Normalizing\" with an arbitrary value\n  // // // We'll see a cleaner technique later :)   \n  // // vec2 normalizedPixel = gl_FragCoord.xy/600.0;\n  // // vec3 color = mix(u_a_color, u_b_color, vec3(vUv.y));\n\n  // // gl_FragColor = vec4(vColor,1.0);\n  // // gl_FragColor = vec4(color, 1.);\n\n  // // gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n\n  // // vec3 color = mix(u_colorA, u_colorB, vZ * 2.0 + 0.5); \n  // // gl_FragColor = vec4(color, 1.0);\n\n  // vec3 color = mix(u_colorA, u_colorB, vZ * 2.0 + 0.5); \n  // gl_FragColor = vec4(color, 1.0);\n\n\n  vec3 color = u_bg;\n\n  float noise1 = snoise(vUv + u_time * (sin(vPos.x * 0.001) + 0.2));\n  float noise2 = snoise(vUv + u_time * (sin(vPos.y * 0.001) + 0.2));\n\n  color = mix(color, u_colorA, noise1);\n  color = mix(color, u_colorB, noise2);\n  \n  gl_FragColor = vec4(color ,1.0);\n}\n\n`\n\nexport default fragmentShader\n"],"mappings":"AAAA,MAAMA,cAAc,GAAI;AACxeAAeA,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}