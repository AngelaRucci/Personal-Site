{"ast":null,"code":"const vertexShader = `\nuniform float u_time;\nuniform vec3 u_colors[4];\nvarying vec3 vColor;\n\n// From https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83#simplex-noise\n//\tSimplex 3D Noise \n//\tby Ian McEwan, Ashima Arts\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise3(vec3 v){ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\n//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\n// https://github.com/hughsk/glsl-noise/blob/master/simplex/2d.glsl\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n    + i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n// End of Simplex Noise Code\n\nvoid main() {\n  vec2 noiseCoord = uv * vec2(1., 2.);\n  float tilt = 0.5*uv.y;\n  // float noise = snoise(vec3(noiseCoord.x + u_time * .03, noiseCoord.y , u_time * 0.01));\n  \n  float noise = snoise(uv + u_time * (sin(noiseCoord.x * 0.001) + 0.2));\n\n\n  // posibily add inlice and offset (min 30 in video)\n  vec3 pos = vec3(position.x, position.y, position.z + noise * 0.3 - tilt);\n  vec4 projectedPosition = projectionMatrix * modelViewMatrix * vec4(pos, 1.);\n\n  // color \n  vColor = u_colors[3];\n\n  for(int i = 0; i< 4; i++){\n    \n    float noiseflow = 2. + float(i) * 0.3;\n    float noiseSpeed = .005 + float(i)* 0.005; \n    float noiseSeed = 1. + float(i) * 2.;\n    vec2 noiseFreq = vec2(0.6, 0.8);\n\n    float noise = snoise3(vec3(\n      noiseCoord.x * noiseFreq.x + u_time * 0.1  * noiseflow, \n      noiseCoord.y * noiseFreq.y, \n      u_time * 0.05 * noiseSpeed + noiseSeed));\n\n\n    vColor = mix(vColor, u_colors[i], noise * 2.);\n  } \n\n  gl_Position = projectedPosition;\n}\n\n`;\nexport default vertexShader;\n\n// const vertexShader = `\n// uniform float u_time;\n// uniform vec3 u_colors[4];\n// varying vec3 vColor;\n\n// // From https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83#simplex-noise\n// //\tSimplex 3D Noise \n// //\tby Ian McEwan, Ashima Arts\n// //\n// vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\n// vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\n// float snoise(vec3 v){ \n//   const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n//   const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// // First corner\n//   vec3 i  = floor(v + dot(v, C.yyy) );\n//   vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// // Other corners\n//   vec3 g = step(x0.yzx, x0.xyz);\n//   vec3 l = 1.0 - g;\n//   vec3 i1 = min( g.xyz, l.zxy );\n//   vec3 i2 = max( g.xyz, l.zxy );\n\n//   //  x0 = x0 - 0. + 0.0 * C \n//   vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n//   vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n//   vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// // Permutations\n//   i = mod(i, 289.0 ); \n//   vec4 p = permute( permute( permute( \n//              i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n//            + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n//            + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// // Gradients\n// // ( N*N points uniformly over a square, mapped onto an octahedron.)\n//   float n_ = 1.0/7.0; // N=7\n//   vec3  ns = n_ * D.wyz - D.xzx;\n\n//   vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n//   vec4 x_ = floor(j * ns.z);\n//   vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n//   vec4 x = x_ *ns.x + ns.yyyy;\n//   vec4 y = y_ *ns.x + ns.yyyy;\n//   vec4 h = 1.0 - abs(x) - abs(y);\n\n//   vec4 b0 = vec4( x.xy, y.xy );\n//   vec4 b1 = vec4( x.zw, y.zw );\n\n//   vec4 s0 = floor(b0)*2.0 + 1.0;\n//   vec4 s1 = floor(b1)*2.0 + 1.0;\n//   vec4 sh = -step(h, vec4(0.0));\n\n//   vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n//   vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n//   vec3 p0 = vec3(a0.xy,h.x);\n//   vec3 p1 = vec3(a0.zw,h.y);\n//   vec3 p2 = vec3(a1.xy,h.z);\n//   vec3 p3 = vec3(a1.zw,h.w);\n\n// //Normalise gradients\n//   vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n//   p0 *= norm.x;\n//   p1 *= norm.y;\n//   p2 *= norm.z;\n//   p3 *= norm.w;\n\n// // Mix final noise value\n//   vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n//   m = m * m;\n//   return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n//                                 dot(p2,x2), dot(p3,x3) ) );\n// }\n\n// void main() {\n//   vec2 noiseCoord = uv * vec2(1., 2.);\n//   float tilt = 0.5*uv.y;\n//   float noise = snoise(vec3(noiseCoord.x + u_time * .03, noiseCoord.y , u_time * 0.01));\n\n//   // posibily add inlice and offset (min 30 in video)\n//   vec3 pos = vec3(position.x, position.y, position.z + noise * 0.3 - tilt);\n//   vec4 projectedPosition = projectionMatrix * modelViewMatrix * vec4(pos, 1.);\n\n//   // color \n//   vColor = u_colors[3];\n\n//   for(int i = 0; i< 4; i++){\n\n//     float noiseflow = 2. + float(i) * 0.3;\n//     float noiseSpeed = .05 + float(i)* 0.05; \n//     float noiseSeed = 1. + float(i) * 2.;\n//     vec2 noiseFreq = vec2(0.3, 0.4);\n\n//     float noise = snoise(vec3(\n//       noiseCoord.x * noiseFreq.x + u_time * 0.01  * noiseflow, \n//       noiseCoord.y * noiseFreq.y + u_time * 0.01  * noiseflow , \n//       u_time * 0.05 * noiseSpeed + noiseSeed));\n\n//     vColor = mix(vColor, u_colors[i], noise);\n//   } \n\n//   gl_Position = projectedPosition;\n// }\n\n// `\n\n// export default vertexShader","map":{"version":3,"names":["vertexShader"],"sources":["/Users/angelarucci/Desktop/Projects/Personal-Site/src/Shader/VertexShader.js"],"sourcesContent":["const vertexShader = `\nuniform float u_time;\nuniform vec3 u_colors[4];\nvarying vec3 vColor;\n\n// From https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83#simplex-noise\n//\tSimplex 3D Noise \n//\tby Ian McEwan, Ashima Arts\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise3(vec3 v){ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\n//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\n// https://github.com/hughsk/glsl-noise/blob/master/simplex/2d.glsl\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n    + i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n// End of Simplex Noise Code\n\nvoid main() {\n  vec2 noiseCoord = uv * vec2(1., 2.);\n  float tilt = 0.5*uv.y;\n  // float noise = snoise(vec3(noiseCoord.x + u_time * .03, noiseCoord.y , u_time * 0.01));\n  \n  float noise = snoise(uv + u_time * (sin(noiseCoord.x * 0.001) + 0.2));\n\n\n  // posibily add inlice and offset (min 30 in video)\n  vec3 pos = vec3(position.x, position.y, position.z + noise * 0.3 - tilt);\n  vec4 projectedPosition = projectionMatrix * modelViewMatrix * vec4(pos, 1.);\n\n  // color \n  vColor = u_colors[3];\n\n  for(int i = 0; i< 4; i++){\n    \n    float noiseflow = 2. + float(i) * 0.3;\n    float noiseSpeed = .005 + float(i)* 0.005; \n    float noiseSeed = 1. + float(i) * 2.;\n    vec2 noiseFreq = vec2(0.6, 0.8);\n\n    float noise = snoise3(vec3(\n      noiseCoord.x * noiseFreq.x + u_time * 0.1  * noiseflow, \n      noiseCoord.y * noiseFreq.y, \n      u_time * 0.05 * noiseSpeed + noiseSeed));\n\n\n    vColor = mix(vColor, u_colors[i], noise * 2.);\n  } \n\n  gl_Position = projectedPosition;\n}\n\n`\n\nexport default vertexShader\n\n\n\n// const vertexShader = `\n// uniform float u_time;\n// uniform vec3 u_colors[4];\n// varying vec3 vColor;\n\n// // From https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83#simplex-noise\n// //\tSimplex 3D Noise \n// //\tby Ian McEwan, Ashima Arts\n// //\n// vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\n// vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\n// float snoise(vec3 v){ \n//   const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n//   const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// // First corner\n//   vec3 i  = floor(v + dot(v, C.yyy) );\n//   vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// // Other corners\n//   vec3 g = step(x0.yzx, x0.xyz);\n//   vec3 l = 1.0 - g;\n//   vec3 i1 = min( g.xyz, l.zxy );\n//   vec3 i2 = max( g.xyz, l.zxy );\n\n//   //  x0 = x0 - 0. + 0.0 * C \n//   vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n//   vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n//   vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// // Permutations\n//   i = mod(i, 289.0 ); \n//   vec4 p = permute( permute( permute( \n//              i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n//            + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n//            + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// // Gradients\n// // ( N*N points uniformly over a square, mapped onto an octahedron.)\n//   float n_ = 1.0/7.0; // N=7\n//   vec3  ns = n_ * D.wyz - D.xzx;\n\n//   vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n//   vec4 x_ = floor(j * ns.z);\n//   vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n//   vec4 x = x_ *ns.x + ns.yyyy;\n//   vec4 y = y_ *ns.x + ns.yyyy;\n//   vec4 h = 1.0 - abs(x) - abs(y);\n\n//   vec4 b0 = vec4( x.xy, y.xy );\n//   vec4 b1 = vec4( x.zw, y.zw );\n\n//   vec4 s0 = floor(b0)*2.0 + 1.0;\n//   vec4 s1 = floor(b1)*2.0 + 1.0;\n//   vec4 sh = -step(h, vec4(0.0));\n\n//   vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n//   vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n//   vec3 p0 = vec3(a0.xy,h.x);\n//   vec3 p1 = vec3(a0.zw,h.y);\n//   vec3 p2 = vec3(a1.xy,h.z);\n//   vec3 p3 = vec3(a1.zw,h.w);\n\n// //Normalise gradients\n//   vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n//   p0 *= norm.x;\n//   p1 *= norm.y;\n//   p2 *= norm.z;\n//   p3 *= norm.w;\n\n// // Mix final noise value\n//   vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n//   m = m * m;\n//   return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n//                                 dot(p2,x2), dot(p3,x3) ) );\n// }\n\n// void main() {\n//   vec2 noiseCoord = uv * vec2(1., 2.);\n//   float tilt = 0.5*uv.y;\n//   float noise = snoise(vec3(noiseCoord.x + u_time * .03, noiseCoord.y , u_time * 0.01));\n\n\n//   // posibily add inlice and offset (min 30 in video)\n//   vec3 pos = vec3(position.x, position.y, position.z + noise * 0.3 - tilt);\n//   vec4 projectedPosition = projectionMatrix * modelViewMatrix * vec4(pos, 1.);\n\n//   // color \n//   vColor = u_colors[3];\n\n//   for(int i = 0; i< 4; i++){\n    \n//     float noiseflow = 2. + float(i) * 0.3;\n//     float noiseSpeed = .05 + float(i)* 0.05; \n//     float noiseSeed = 1. + float(i) * 2.;\n//     vec2 noiseFreq = vec2(0.3, 0.4);\n\n//     float noise = snoise(vec3(\n//       noiseCoord.x * noiseFreq.x + u_time * 0.01  * noiseflow, \n//       noiseCoord.y * noiseFreq.y + u_time * 0.01  * noiseflow , \n//       u_time * 0.05 * noiseSpeed + noiseSeed));\n\n//     vColor = mix(vColor, u_colors[i], noise);\n//   } \n\n//   gl_Position = projectedPosition;\n// }\n\n// `\n\n// export default vertexShader"],"mappings":"AAAA,MAAMA,YAAY,GAAI;AACteAAeA,YAAY;;AAI3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}