{"ast":null,"code":"var _jsxFileName = \"/Users/angelarucci/Desktop/Projects/Personal-Site/src/ShaderObject.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef } from 'react';\nimport { useThree, useFrame, extend, Canvas, Vector3 } from '@react-three/fiber';\nimport { shaderMaterial } from '@react-three/drei';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreationMaterial = shaderMaterial({\n  time: 0.,\n  resolution: new Vector3()\n}, `\nvarying vec2 vUv;\n\nvoid main()\t{\n  vUv = uv;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.);\n}\n`, `\nuniform vec3 resolution;\nuniform float time;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec3 c;\n\tfloat l, z = time;\n\n\tfor(int i=0;i<10;i++) {\n\t\tvec2 uv, p = fragCoord.xy/resolution.xy;\n\t\tuv = p;\n\t\tp -= .5;\n\t\tp.x *= resolution.x / resolution.y;\n\t\tz += 2.0;\n\t\tl = length(p);\n\t\tuv += p / l * (sin(z / 2.) + 1.) * abs(sin(l * 3. - z * .5));\n\t\tc[i] = .01 / length(abs(mod(uv, 1.) -.5));\n\t}\n\n\tfragColor = vec4(c / l, time / 2.);\n}\n\nvoid main() {\n  mainImage(gl_FragColor, gl_FragCoord.xy);\n}\n`);\nextend({\n  CreationMaterial\n});\nconst ShaderObject = () => {\n  _s();\n  const mesh = useRef();\n  const {\n    size\n  } = useThree();\n  useFrame((state, delta) => {\n    mesh.current.material.uniforms.time.value += delta;\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: mesh,\n    children: [/*#__PURE__*/_jsxDEV(\"planeBufferGeometry\", {\n      args: [size.width, size.height]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"creationMaterial\", {\n      resolution: [size.width, size.height, 1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(ShaderObject, \"X4cdqAWkV8XxeN4pN7k8EszJk6M=\", false, function () {\n  return [useThree, useFrame];\n});\n_c = ShaderObject;\nconst Background = () => {\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    orthographic: true,\n    dpr: window.devicePixelRatio,\n    children: /*#__PURE__*/_jsxDEV(ShaderObject, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 7\n  }, this);\n};\n_c2 = Background;\nexport default Background;\nvar _c, _c2;\n$RefreshReg$(_c, \"ShaderObject\");\n$RefreshReg$(_c2, \"Background\");","map":{"version":3,"names":["React","useRef","useThree","useFrame","extend","Canvas","Vector3","shaderMaterial","jsxDEV","_jsxDEV","CreationMaterial","time","resolution","ShaderObject","_s","mesh","size","state","delta","current","material","uniforms","value","ref","children","args","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","Background","orthographic","dpr","window","devicePixelRatio","_c2","$RefreshReg$"],"sources":["/Users/angelarucci/Desktop/Projects/Personal-Site/src/ShaderObject.jsx"],"sourcesContent":["import React, { useRef } from 'react'\nimport { useThree, useFrame, extend, Canvas, Vector3 } from '@react-three/fiber'\nimport { shaderMaterial } from '@react-three/drei'\n\n\nconst CreationMaterial = shaderMaterial({\n  time: 0.,\n  resolution: new Vector3()\n},\n`\nvarying vec2 vUv;\n\nvoid main()\t{\n  vUv = uv;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.);\n}\n`,\n`\nuniform vec3 resolution;\nuniform float time;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec3 c;\n\tfloat l, z = time;\n\n\tfor(int i=0;i<10;i++) {\n\t\tvec2 uv, p = fragCoord.xy/resolution.xy;\n\t\tuv = p;\n\t\tp -= .5;\n\t\tp.x *= resolution.x / resolution.y;\n\t\tz += 2.0;\n\t\tl = length(p);\n\t\tuv += p / l * (sin(z / 2.) + 1.) * abs(sin(l * 3. - z * .5));\n\t\tc[i] = .01 / length(abs(mod(uv, 1.) -.5));\n\t}\n\n\tfragColor = vec4(c / l, time / 2.);\n}\n\nvoid main() {\n  mainImage(gl_FragColor, gl_FragCoord.xy);\n}\n`)\n\nextend({ CreationMaterial })\n\nconst ShaderObject = () => {\n  const mesh = useRef()\n\n  const { size } = useThree()\n\n  useFrame((state, delta) => {\n    mesh.current.material.uniforms.time.value += delta\n  })\n\n  return (\n    <mesh ref={mesh}>\n      <planeBufferGeometry args={[size.width, size.height]} />\n      <creationMaterial resolution={[size.width, size.height, 1]} />\n    </mesh>\n  )\n}\n\nconst Background = () => {\n\n  return (\n      <Canvas\n        orthographic={true}\n        dpr={window.devicePixelRatio}\n      >\n        <ShaderObject />\n      </Canvas>\n  )\n}\n\n\nexport default Background"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,QAAQ,OAAO;AACrC,SAASC,QAAQ,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,MAAM,EAAEC,OAAO,QAAQ,oBAAoB;AAChF,SAASC,cAAc,QAAQ,mBAAmB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGlD,MAAMC,gBAAgB,GAAGH,cAAc,CAAC;EACtCI,IAAI,EAAE,EAAE;EACRC,UAAU,EAAE,IAAIN,OAAO,CAAC;AAC1B,CAAC,EACA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EACA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;AAEFF,MAAM,CAAC;EAAEM;AAAiB,CAAC,CAAC;AAE5B,MAAMG,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAMC,IAAI,GAAGd,MAAM,CAAC,CAAC;EAErB,MAAM;IAAEe;EAAK,CAAC,GAAGd,QAAQ,CAAC,CAAC;EAE3BC,QAAQ,CAAC,CAACc,KAAK,EAAEC,KAAK,KAAK;IACzBH,IAAI,CAACI,OAAO,CAACC,QAAQ,CAACC,QAAQ,CAACV,IAAI,CAACW,KAAK,IAAIJ,KAAK;EACpD,CAAC,CAAC;EAEF,oBACET,OAAA;IAAMc,GAAG,EAAER,IAAK;IAAAS,QAAA,gBACdf,OAAA;MAAqBgB,IAAI,EAAE,CAACT,IAAI,CAACU,KAAK,EAAEV,IAAI,CAACW,MAAM;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACxDtB,OAAA;MAAkBG,UAAU,EAAE,CAACI,IAAI,CAACU,KAAK,EAAEV,IAAI,CAACW,MAAM,EAAE,CAAC;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1D,CAAC;AAEX,CAAC;AAAAjB,EAAA,CAfKD,YAAY;EAAA,QAGCX,QAAQ,EAEzBC,QAAQ;AAAA;AAAA6B,EAAA,GALJnB,YAAY;AAiBlB,MAAMoB,UAAU,GAAGA,CAAA,KAAM;EAEvB,oBACIxB,OAAA,CAACJ,MAAM;IACL6B,YAAY,EAAE,IAAK;IACnBC,GAAG,EAAEC,MAAM,CAACC,gBAAiB;IAAAb,QAAA,eAE7Bf,OAAA,CAACI,YAAY;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC;AAEf,CAAC;AAAAO,GAAA,GAVKL,UAAU;AAahB,eAAeA,UAAU;AAAA,IAAAD,EAAA,EAAAM,GAAA;AAAAC,YAAA,CAAAP,EAAA;AAAAO,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}