{"ast":null,"code":"const vertexShader = `\nuniform float u_time;\nuniform vec3 u_colors[4];\nvarying vec3 vColor;\n\n// From https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83#simplex-noise\n//\tSimplex 3D Noise \n//\tby Ian McEwan, Ashima Arts\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise(vec3 v){ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\nvoid main() {\n  vec2 noiseCoord = uv * vec2(3., 4.);\n  float tilt = -0.8*uv.y;\n  float incline = uv.x * 0.1;\n  float offset = incline * mix(-0.25, 0.25, uv.y);\n\n  float noise = snoise(vec3(noiseCoord.x + u_time * 3., noiseCoord.y , u_time * 10.));\n\n  noise = max(0., noise);\n\n  // math formula \n  // vec3 pos = vec3(position.x, position.y, position.z + 0.1*sin(uv.x*20.)*sin(uv.y*20.));\n\n  // posibily add inlice and offset (min 30 in video)\n  vec3 pos = vec3(position.x, position.y, position.z + noise * 0.5 + tilt + incline + offset);\n\n  vec4 projectedPosition = projectionMatrix * modelViewMatrix * vec4(pos, 1.);\n\n  // color \n  vColor = u_colors[3];\n\n  for(int i = 0; i< 3; i++){\n    \n    float noiseflow = 5. + float(i) * 0.3;\n    float noiseSpeed = 10. + float(i)* 0.3; \n    float noiseSeed = 1. + float(i) * 10.;\n    vec2 noiseFreq = vec2(1., 1.4);\n\n    float noiseFloor = 0.1;\n    float noiseCeiling = 0.6 + float(i)*0.07;\n\n    float noise = smoothstep(\n      noiseFloor, \n      noiseCeiling, \n      snoise(vec3(\n        noiseCoord.x * noiseFreq.x + u_time * noiseflow, \n        noiseCoord.y * noiseFreq.y + u_time * noiseflow, \n        u_time * noiseSpeed + noiseSeed))\n    );\n\n    vColor = mix(vColor, u_colors[i], noise);\n  } \n\n  gl_Position = projectedPosition;\n}\n\n`;\nexport default vertexShader;","map":{"version":3,"names":["vertexShader"],"sources":["/Users/angelarucci/Desktop/Projects/Personal-Site/src/components/common/Shader/VertexShader.js"],"sourcesContent":["const vertexShader = `\nuniform float u_time;\nuniform vec3 u_colors[4];\nvarying vec3 vColor;\n\n// From https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83#simplex-noise\n//\tSimplex 3D Noise \n//\tby Ian McEwan, Ashima Arts\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise(vec3 v){ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\nvoid main() {\n  vec2 noiseCoord = uv * vec2(3., 4.);\n  float tilt = -0.8*uv.y;\n  float incline = uv.x * 0.1;\n  float offset = incline * mix(-0.25, 0.25, uv.y);\n\n  float noise = snoise(vec3(noiseCoord.x + u_time * 3., noiseCoord.y , u_time * 10.));\n\n  noise = max(0., noise);\n\n  // math formula \n  // vec3 pos = vec3(position.x, position.y, position.z + 0.1*sin(uv.x*20.)*sin(uv.y*20.));\n\n  // posibily add inlice and offset (min 30 in video)\n  vec3 pos = vec3(position.x, position.y, position.z + noise * 0.5 + tilt + incline + offset);\n\n  vec4 projectedPosition = projectionMatrix * modelViewMatrix * vec4(pos, 1.);\n\n  // color \n  vColor = u_colors[3];\n\n  for(int i = 0; i< 3; i++){\n    \n    float noiseflow = 5. + float(i) * 0.3;\n    float noiseSpeed = 10. + float(i)* 0.3; \n    float noiseSeed = 1. + float(i) * 10.;\n    vec2 noiseFreq = vec2(1., 1.4);\n\n    float noiseFloor = 0.1;\n    float noiseCeiling = 0.6 + float(i)*0.07;\n\n    float noise = smoothstep(\n      noiseFloor, \n      noiseCeiling, \n      snoise(vec3(\n        noiseCoord.x * noiseFreq.x + u_time * noiseflow, \n        noiseCoord.y * noiseFreq.y + u_time * noiseflow, \n        u_time * noiseSpeed + noiseSeed))\n    );\n\n    vColor = mix(vColor, u_colors[i], noise);\n  } \n\n  gl_Position = projectedPosition;\n}\n\n`\n\nexport default vertexShader"],"mappings":"AAAA,MAAMA,YAAY,GAAI;AACteAAeA,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}