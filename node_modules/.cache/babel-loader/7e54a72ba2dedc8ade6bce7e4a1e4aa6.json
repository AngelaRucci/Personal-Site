{"ast":null,"code":"var _this = this,\n  _jsxFileName = \"/Users/angelarucci/Desktop/Projects/Personal-Site/src/ShaderObject.jsx\";\nimport { useRef } from 'react';\nimport { useThree, useFrame, extend, Canvas } from '@react-three/fiber';\nimport { Vector3 } from 'three';\nimport { shaderMaterial } from '@react-three/drei';\nvar CreationMaterial = shaderMaterial({\n  time: 0.,\n  resolution: new Vector3()\n}, \"\\nvarying vec2 vUv;\\n\\nvoid main()\\t{\\n  vUv = uv;\\n\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.);\\n}\\n\", \"\\nuniform vec3 resolution;\\nuniform float time;\\n\\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\\n\\tvec3 c;\\n\\tfloat l, z = time;\\n\\n\\tfor(int i=0;i<10;i++) {\\n\\t\\tvec2 uv, p = fragCoord.xy/resolution.xy;\\n\\t\\tuv = p;\\n\\t\\tp -= .5;\\n\\t\\tp.x *= resolution.x / resolution.y;\\n\\t\\tz += 2.0;\\n\\t\\tl = length(p);\\n\\t\\tuv += p / l * (sin(z / 2.) + 1.) * abs(sin(l * 3. - z * .5));\\n\\t\\tc[i] = .01 / length(abs(mod(uv, 1.) -.5));\\n\\t}\\n\\n\\tfragColor = vec4(c / l, time / 2.);\\n}\\n\\nvoid main() {\\n  mainImage(gl_FragColor, gl_FragCoord.xy);\\n}\\n\");\nextend({\n  CreationMaterial: CreationMaterial\n});\nvar ShaderObject = function ShaderObject() {\n  var mesh = useRef();\n  var _useThree = useThree(),\n    size = _useThree.size;\n  useFrame(function (state, delta) {\n    mesh.current.material.uniforms.time.value += delta;\n  });\n  return /*#__PURE__*/React.createElement(\"mesh\", {\n    ref: mesh,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"planeBufferGeometry\", {\n    args: [size.width, size.height],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"creationMaterial\", {\n    resolution: [size.width, size.height, 1],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }));\n};\nvar Background = function Background() {\n  return /*#__PURE__*/React.createElement(Canvas, {\n    orthographic: true,\n    dpr: window.devicePixelRatio,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ShaderObject, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }));\n};\nexport default Background;","map":{"version":3,"names":["useRef","useThree","useFrame","extend","Canvas","Vector3","shaderMaterial","CreationMaterial","time","resolution","ShaderObject","mesh","_useThree","size","state","delta","current","material","uniforms","value","React","createElement","ref","__self","_this","__source","fileName","_jsxFileName","lineNumber","columnNumber","args","width","height","Background","orthographic","dpr","window","devicePixelRatio"],"sources":["/Users/angelarucci/Desktop/Projects/Personal-Site/src/ShaderObject.jsx"],"sourcesContent":["import { useRef } from 'react'\nimport { useThree, useFrame, extend, Canvas } from '@react-three/fiber'\nimport { Vector3 } from 'three'\nimport { shaderMaterial } from '@react-three/drei'\n\n\nconst CreationMaterial = shaderMaterial({\n  time: 0.,\n  resolution: new Vector3()\n},\n`\nvarying vec2 vUv;\n\nvoid main()\t{\n  vUv = uv;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.);\n}\n`,\n`\nuniform vec3 resolution;\nuniform float time;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec3 c;\n\tfloat l, z = time;\n\n\tfor(int i=0;i<10;i++) {\n\t\tvec2 uv, p = fragCoord.xy/resolution.xy;\n\t\tuv = p;\n\t\tp -= .5;\n\t\tp.x *= resolution.x / resolution.y;\n\t\tz += 2.0;\n\t\tl = length(p);\n\t\tuv += p / l * (sin(z / 2.) + 1.) * abs(sin(l * 3. - z * .5));\n\t\tc[i] = .01 / length(abs(mod(uv, 1.) -.5));\n\t}\n\n\tfragColor = vec4(c / l, time / 2.);\n}\n\nvoid main() {\n  mainImage(gl_FragColor, gl_FragCoord.xy);\n}\n`)\n\nextend({ CreationMaterial })\n\nconst ShaderObject = () => {\n  const mesh = useRef()\n\n  const { size } = useThree()\n\n  useFrame((state, delta) => {\n    mesh.current.material.uniforms.time.value += delta\n  })\n\n  return (\n    <mesh ref={mesh}>\n      <planeBufferGeometry args={[size.width, size.height]} />\n      <creationMaterial resolution={[size.width, size.height, 1]} />\n    </mesh>\n  )\n}\n\nconst Background = () => {\n\n  return (\n      <Canvas\n        orthographic={true}\n        dpr={window.devicePixelRatio}\n      >\n        <ShaderObject />\n      </Canvas>\n  )\n}\n\n\nexport default Background"],"mappings":";;AAAA,SAASA,MAAM,QAAQ,OAAO;AAC9B,SAASC,QAAQ,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,MAAM,QAAQ,oBAAoB;AACvE,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,cAAc,QAAQ,mBAAmB;AAGlD,IAAMC,gBAAgB,GAAGD,cAAc,CAAC;EACtCE,IAAI,EAAE,EAAE;EACRC,UAAU,EAAE,IAAIJ,OAAO,CAAC;AAC1B,CAAC,grBAmCA,CAAC;AAEFF,MAAM,CAAC;EAAEI,gBAAgB,EAAhBA;AAAiB,CAAC,CAAC;AAE5B,IAAMG,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAAS;EACzB,IAAMC,IAAI,GAAGX,MAAM,CAAC,CAAC;EAAA,IAAAY,SAAA,GAEJX,QAAQ,CAAC,CAAC;IAAnBY,IAAI,GAAAD,SAAA,CAAJC,IAAI;EAEZX,QAAQ,CAAC,UAACY,KAAK,EAAEC,KAAK,EAAK;IACzBJ,IAAI,CAACK,OAAO,CAACC,QAAQ,CAACC,QAAQ,CAACV,IAAI,CAACW,KAAK,IAAIJ,KAAK;EACpD,CAAC,CAAC;EAEF,oBACEK,KAAA,CAAAC,aAAA;IAAMC,GAAG,EAAEX,IAAK;IAAAY,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACdT,KAAA,CAAAC,aAAA;IAAqBS,IAAI,EAAE,CAACjB,IAAI,CAACkB,KAAK,EAAElB,IAAI,CAACmB,MAAM,CAAE;IAAAT,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,eACxDT,KAAA,CAAAC,aAAA;IAAkBZ,UAAU,EAAE,CAACI,IAAI,CAACkB,KAAK,EAAElB,IAAI,CAACmB,MAAM,EAAE,CAAC,CAAE;IAAAT,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CACzD,CAAC;AAEX,CAAC;AAED,IAAMI,UAAU,GAAG,SAAbA,UAAUA,CAAA,EAAS;EAEvB,oBACIb,KAAA,CAAAC,aAAA,CAACjB,MAAM;IACL8B,YAAY,EAAE,IAAK;IACnBC,GAAG,EAAEC,MAAM,CAACC,gBAAiB;IAAAd,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAE7BT,KAAA,CAAAC,aAAA,CAACX,YAAY;IAAAa,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CACT,CAAC;AAEf,CAAC;AAGD,eAAeI,UAAU"},"metadata":{},"sourceType":"module"}