{"ast":null,"code":"import _toConsumableArray from \"/Users/angelarucci/Desktop/Projects/Personal-Site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"/Users/angelarucci/Desktop/Projects/Personal-Site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { applyProps } from '@react-three/fiber';\nimport { DecalGeometry } from 'three-stdlib';\nfunction isArray(vec) {\n  return Array.isArray(vec);\n}\nfunction vecToArray() {\n  var vec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [0, 0, 0];\n  if (isArray(vec)) {\n    return vec;\n  } else if (vec instanceof THREE.Vector3 || vec instanceof THREE.Euler) {\n    return [vec.x, vec.y, vec.z];\n  } else {\n    return [vec, vec, vec];\n  }\n}\nvar Decal = /*#__PURE__*/React.forwardRef(function Decal(_ref, forwardRef) {\n  var debug = _ref.debug,\n    _ref$depthTest = _ref.depthTest,\n    depthTest = _ref$depthTest === void 0 ? false : _ref$depthTest,\n    _ref$polygonOffsetFac = _ref.polygonOffsetFactor,\n    polygonOffsetFactor = _ref$polygonOffsetFac === void 0 ? -10 : _ref$polygonOffsetFac,\n    map = _ref.map,\n    mesh = _ref.mesh,\n    children = _ref.children,\n    position = _ref.position,\n    rotation = _ref.rotation,\n    scale = _ref.scale,\n    props = _objectWithoutProperties(_ref, [\"debug\", \"depthTest\", \"polygonOffsetFactor\", \"map\", \"mesh\", \"children\", \"position\", \"rotation\", \"scale\"]);\n  var ref = React.useRef(null);\n  React.useImperativeHandle(forwardRef, function () {\n    return ref.current;\n  });\n  var helper = React.useRef(null);\n  React.useLayoutEffect(function () {\n    var parent = (mesh == null ? void 0 : mesh.current) || ref.current.parent;\n    var target = ref.current;\n    if (!(parent instanceof THREE.Mesh)) {\n      throw new Error('Decal must have a Mesh as parent or specify its \"mesh\" prop');\n    }\n    var state = {\n      position: new THREE.Vector3(),\n      rotation: new THREE.Euler(),\n      scale: new THREE.Vector3(1, 1, 1)\n    };\n    if (parent) {\n      applyProps(state, {\n        position: position,\n        scale: scale\n      }); // Zero out the parents matrix world for this operation\n\n      var matrixWorld = parent.matrixWorld.clone();\n      parent.matrixWorld.identity();\n      if (!rotation || typeof rotation === 'number') {\n        var o = new THREE.Object3D();\n        o.position.copy(state.position);\n        o.lookAt(parent.position);\n        if (typeof rotation === 'number') o.rotateZ(rotation);\n        applyProps(state, {\n          rotation: o.rotation\n        });\n      } else {\n        applyProps(state, {\n          rotation: rotation\n        });\n      }\n      target.geometry = new DecalGeometry(parent, state.position, state.rotation, state.scale);\n      if (helper.current) {\n        applyProps(helper.current, state); // Prevent the helpers from blocking rays\n\n        helper.current.traverse(function (child) {\n          return child.raycast = function () {\n            return null;\n          };\n        });\n      } // Reset parents matix-world\n\n      parent.matrixWorld = matrixWorld;\n      return function () {\n        target.geometry.dispose();\n      };\n    }\n  }, [mesh].concat(_toConsumableArray(vecToArray(position)), _toConsumableArray(vecToArray(scale)), _toConsumableArray(vecToArray(rotation)))); // <meshStandardMaterial transparent polygonOffset polygonOffsetFactor={-10} {...props} />}\n\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: ref,\n    \"material-transparent\": true,\n    \"material-polygonOffset\": true,\n    \"material-polygonOffsetFactor\": polygonOffsetFactor,\n    \"material-depthTest\": depthTest,\n    \"material-map\": map\n  }, props), children, debug && /*#__PURE__*/React.createElement(\"mesh\", {\n    ref: helper\n  }, /*#__PURE__*/React.createElement(\"boxGeometry\", null), /*#__PURE__*/React.createElement(\"meshNormalMaterial\", {\n    wireframe: true\n  }), /*#__PURE__*/React.createElement(\"axesHelper\", null)));\n});\nexport { Decal };","map":null,"metadata":{},"sourceType":"module"}