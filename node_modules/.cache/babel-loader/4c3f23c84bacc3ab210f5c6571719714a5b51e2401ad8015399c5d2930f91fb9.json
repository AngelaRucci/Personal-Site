{"ast":null,"code":"const fragmentShader = `\nvarying vec2 vUv;\n\nvoid main() {\n  vec3 colorA = vec3(0.912,0.191,0.652);\n  vec3 colorB = vec3(1.000,0.777,0.052);\n\n  // \"Normalizing\" with an arbitrary value\n  // We'll see a cleaner technique later :)   \n  vec2 normalizedPixel = gl_FragCoord.xy/600.0;\n  vec3 color = mix(colorA, colorB, normalizedPixel.x);\n\n  gl_FragColor = vec4(color,1.0);\n\n  // gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n}\n\n`;\nexport default fragmentShader;","map":{"version":3,"names":["fragmentShader"],"sources":["/Users/angelarucci/Desktop/Projects/Personal-Site/src/Shader/FragmentShader.js"],"sourcesContent":["const fragmentShader = `\nvarying vec2 vUv;\n\nvoid main() {\n  vec3 colorA = vec3(0.912,0.191,0.652);\n  vec3 colorB = vec3(1.000,0.777,0.052);\n\n  // \"Normalizing\" with an arbitrary value\n  // We'll see a cleaner technique later :)   \n  vec2 normalizedPixel = gl_FragCoord.xy/600.0;\n  vec3 color = mix(colorA, colorB, normalizedPixel.x);\n\n  gl_FragColor = vec4(color,1.0);\n\n  // gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n}\n\n`\n\nexport default fragmentShader\n"],"mappings":"AAAA,MAAMA,cAAc,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,eAAeA,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}